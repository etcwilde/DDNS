package DNS;

message Request
{
	required bytes id = 1;
	required RequestType type = 2;
	optional string ip = 3; //Original Source IP
	optional int32 port = 4; //Original Source Port
	optional bool forward = 5 [default = false]; //Forwarded packet
	optional bool have_pred = 6;

	enum RequestType {
		JOIN = 0; // Join with the ring
		GET = 1;  // Get IP from ring
		SYNC = 2; // Synchronize with ring
		BAD = 3;  // Bad Request -- (not found)
		RES = 4;  // Response -- (Found)
		PRED = 5; // Get the name of the predecessor
	}
}
/*
Requests and Responses:
Note: All Responses are passed directly to the requesting node, this way only a
single traversal of the ring is required.

JOIN: Node joining chord ring
	id: The hash of the hostname for the node joining
	forward: The packet has been forwarded from at least one other node
		ip and port fields will be set
	type: The type of packet will be JOIN
	ip: The ip address of the sending node, only set if forward is set
	port: The port address of the sending node, only set if forward is set
	have_pred: -- ignore --

GET: Requesting a lookup
	id: The hash of the hostname to be resolved
	forward: The request has been forwarded from at least one other node
	type: Type will be GET
	have_pred: -- ignore --

SYNC: Synchronization request used to hold the ring together
	(Request)
	id: The id of the node making the request
	forward: false

	(Response)
	id: The id of the actual predecessor node
	ip: The ip address of the predecessor node
	port: The port of the predecessor node
	forward: true


	Note: Synchronization requests will never be forwarded through another
	node. They are performed by the predecessor, or a node that thinks it
	is the predecessor.

BAD: Response type for a bad request
	id: The content will be the id from the request
	forward: false

RES: Response Type for a resolved request
	id: The content is the id from the request
	forward: false
	ip: The resolved ip of the hostname
	port: The resolved port number of the hostname

PRED: Requesting the id of the predecessor
	(Request)
	id: The id of the requesting node
	ip: The ip of the requesting node
	port: The port of the requesting node
	forward: false

	(Response)
	id: The id of the predecessor node, if have_pred
	ip: The ip of the predecessor node, if have_pred
	port: The port of the predecessor node, if have_pred
	forward: true
	have_pred: ( m_predecessor.set ? true : false )
*/
